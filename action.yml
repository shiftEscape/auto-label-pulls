name: "Auto Label Pulls"
description: "Automated labeling for Pull Requests based on the target branch"
author: shiftEscape
branding:
  icon: "tag"
  color: "purple"

inputs:
  token:
    description: "Access token with restrictive `repo` permissions"
    required: true
  config-path:
    description: "Path of JSON file containing branch names and their corresponding labels"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout latest code
      uses: actions/checkout@v2

    - name: Verify Event, Action and Author
      if: ${{ github.event_name != 'pull_request' || github.event.action != 'opened' || github.actor == 'dependabot[bot]' }}
      shell: bash
      run: |
        echo "Event is not a 'pull request' of type 'opened' or author is 'dependabot'. Exiting the workflow."
        exit 1

    - name: Validate and Parse Config File
      id: validate-and-parse
      shell: bash
      run: |
        # Start here
        CONFIGURATION_PATH="${{ inputs.config-path }}"

        # Check if the configuration file exists
        if [ ! -f $CONFIGURATION_PATH ]; then
          echo "The config file '$CONFIGURATION_PATH' does not exist. Exiting the workflow."
          exit 1
        fi

        # Try to parse the JSON file to validate if it's a correct JSON
        JSON_CONFIG=$(cat $CONFIGURATION_PATH)
        if ! echo $JSON_CONFIG | jq empty > /dev/null 2>&1; then
          echo "Invalid JSON format in '$CONFIGURATION_PATH'. Exiting the workflow."
          exit 1
        fi

        # Check if the JSON is not empty
        if [ $(echo $JSON_CONFIG | jq 'length') -eq 0 ]; then
          echo "The JSON file '$CONFIGURATION_PATH' is empty. Exiting the workflow."
          exit 1
        fi

        # Set the ENV
        echo "CONFIGURATION_PATH=$CONFIGURATION_PATH" >> "$GITHUB_OUTPUT"

    - name: Verify PR Base Branch Config Match
      id: verify-base-branch
      shell: bash
      run: |
        BASE_BRANCH=${{ github.event.pull_request.base.ref }}
        CONFIGURATION_PATH="${{ steps.validate-and-parse.outputs.CONFIGURATION_PATH }}"
        JSON_CONFIG=$(cat $CONFIGURATION_PATH)

        # Check if the base branch is in the keys of the JSON file
        if ! echo $JSON_CONFIG | jq -e --arg key "$BASE_BRANCH" 'has($key)' > /dev/null; then
          echo "Base branch '$BASE_BRANCH' not found in config file '$CONFIGURATION_PATH'"
          exit 1
        fi

        # Get the value of the key in JSON_CONFIG
        VALUE=$(echo $JSON_CONFIG | jq -r --arg key "$BASE_BRANCH" '.[$key]')

        # Set the ENV
        echo "TO_ASSIGN_LABEL=$VALUE" >> "$GITHUB_OUTPUT"

    - name: Verify Label
      id: verify-label
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        OWNER="${{ github.event.pull_request.head.repo.owner.login }}"
        REPO="${{ github.event.pull_request.head.repo.name }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        LABEL_NAME="${{ steps.verify-base-branch.outputs.TO_ASSIGN_LABEL }}"
        ENCODE_LABEL="$(printf "%s" "$LABEL_NAME" | jq -s -R -r @uri)"

        # Check if the label name exists
        if ! gh api repos/$OWNER/$REPO/labels/$ENCODE_LABEL -f status=200 >/dev/null; then
          RANDOM_COLOR=$(openssl rand -hex 3)
          # Add the label to the pull request
          gh api repos/$OWNER/$REPO/labels \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -f name="$LABEL_NAME" \
            -f color="$RANDOM_COLOR"
        fi

    - name: Assign Label to PR
      id: assign-label-to-pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        LABEL_NAME="${{ steps.verify-base-branch.outputs.TO_ASSIGN_LABEL }}"

        # Assign label to PR
        gh issue edit "$PR_NUMBER" --add-label "$LABEL_NAME"
